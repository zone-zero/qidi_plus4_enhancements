[gcode_macro PRINT_START]
description: updated print_start macro to handle more scenarios 

gcode:
    { action_respond_info( "print start requested" ) }
    AUTOTUNE_SHAPERS

    # get vars from slicer

    # temps
    #   bed temp for the print. no default
    {% set bedtemp = params.BED|int %}
    #   hotend temp for the print. no default.
    {% set hotendtemp = params.HOTEND|int %}
    #   chamber temp for the print. defaults to 0
    {% set chambertemp = params.CHAMBER|default(0)|int %}
    #   max allowed chamber temp when the mesh/auto z process is started. defaults to 30c
    {% set mesh_max_chambertemp = params.MESH_MAX_CHAMBER|default(30)|int %}
    #   maximum allowed bedtemp for pulling the mesh. defaults to 60c. 
    #   If the print temp is lower than this, that will be used instead.
    {% set mesh_max_bedtemp = params.MESH_MAX_BED|default(60)|int %}

    # bools
    #   error out if we fail to cool the chamber. defaults to 1 (true)
    {% set error_on_cool_fail = params.ERROR_ON_COOL_FAIL|default(1)|int %}
    #   use a prebuilt mesh (if availble). defaults to 1 (true)
    {% set use_prebuilt_mesh = params.USE_PREBUILT_MESH|default(1)|int %}
    #   use a named z offeset, (if available). defaults to 1 (true)
    {% set use_named_zoffset = params.USE_NAMED_ZOFFSET|default(1)|int %}
   
    # strings
    #   print bed type from the slicer. Defaults to "generic". 
    #   will be used, along with print temp, to derive a mesh name if no name is specified.
    #   in order to be used as a potential variable name, all spaces will be replaced with underscores and will be converted to lowercase
    {% set bed_type = params.BED_TYPE|default("generic plate") | replace(" ", "_") | lower %}
    #   skew profile. defaults to empty string/none
    {% set skew_profile = params.SKEW_PROFILE|default("") %}
    #   mesh_name. The printer will attempt to load this mesh rather than run a KAMP calibration.
    #   If it doesn't exist, KAMP will be run.
    #   The default is the bed_type and temp
    #   Example: "textured_pei_plate-100c"
    {% set mesh_name = params.MESH_NAME|default(bed_type ~ "-" ~ bedtemp ~ "c") | lower%}
    #   named z offset. defaults to z_offset-[mesh_name] Example: "z_offset-textured_pei_plate-100c"
    #   note that the default zoffset name matches the default saved mesh name, so they can go together.
    {% if use_named_zoffset %}
        {% set z_offset_name = params.Z_OFFSET_NAME|default(mesh_name) | replace(" ", "_") | lower %}
        # prepend "z_offset-" to the name so we don't accidentally overwrite something important
        {% set z_offset_name = "z_offset-" ~ z_offset_name %}
    {% else %}
        {% set z_offset_name = "z_offset" %}
    {% endif %}

    # times
    # how long we heat soak the bed before pulling the mesh. defaults to 5m
    {% set pre_mesh_soaktime = params.PRE_MESH_SOAK_TIME|default(5)|int %}
    # how long we heat soak the bed after pulling the mesh, _if_ the bed temp is lower. defaults to 5m
    {% set pre_print_soaktime = params.PRE_PRINT_SOAK_TIME|default(5)|int %}

    # calculated
    #   determine temperature to mesh at, lower of either the print bedtemp or the mesh_max_bedtemp.
    {% set mesh_bedtemp = [bedtemp, mesh_max_bedtemp] | min | int %}

    #save z_offset name to save_zoffset_macro so it can be saved later
    SET_GCODE_VARIABLE MACRO=save_zoffset VARIABLE=z_offset_name        VALUE='"{ z_offset_name }"'

    set_zoffset
    M104 S0


    M106 P2 S0
    M106 P3 S0
    M106 S255
    G28      
    M141 S0
    #M140 S{bedtemp}    
    M106 S0
    M400
    


    # try to use prebuilt mesh before calibrating/pre-mesh soaking
    {% set auto_mesh = 1 %}

    {% if use_prebuilt_mesh %}
        { action_respond_info("requested to use prebuilt bed mesh called: " ~ mesh_name) }
        {% if mesh_name in printer.bed_mesh.profiles %}
            BED_MESH_PROFILE LOAD={mesh_name}
            { action_respond_info("mesh loaded") }
            {% set auto_mesh = 0 %}
        {% else %} #tried to use a saved mesh, but it doesn't exist
        { action_respond_info("could not find prebuilt mesh. calibrating...") }
        {% endif %}
    {% else %} 
        { action_respond_info("not attempting to load prebuilt mesh. calibrating...")}
    {% endif %}


    # if we are updating the z offset or running a full auto-mesh, we need to 
    # ensure the chamber is cool, then heatsoak at our mesh bedtemp to ensure a good value.
    {% if update_z_offset or auto_mesh %}
        

        # start the pre-mesh heat soak
        { action_respond_info("starting pre-mesh/auto-z heatsoak") }
        #{ action_respond_info("bed mesh temp: %.1fc w/%1dm soak ,  max chamber temp: %.1fc" % (mesh_bedtemp, pre_mesh_soaktime, mesh_max_chambertemp)) }
        HEAT_SOAK TARGET={ mesh_bedtemp } DURATION={ pre_mesh_soaktime } KEEP_CHAMBER_COOL=1
        
        # check that the chamber is cool enough to do our mesh
        CHECK_CHAMBER_TEMP MAX={ mesh_max_chambertemp } HALT_ON_FAIL=1
        # might need to rehome if the steppers were turned off during the soak
        M106 P3 S255
        M140 S{mesh_bedtemp}
        _CG28
        RESPOND TYPE=command MSG="clearing nozzle in prep for bed mesh"
        CLEAR_NOZZLE HOTEND={hotendtemp}
        M104 S140
        #pull a bed mesh
        {% if auto_mesh %}
            RESPOND TYPE=command MSG="starting bed mesh"
            G29
        {% endif %}

    {% else %}
        { action_respond_info("skipping chamber cool and premesh soak, as both a saved mesh and saved z offset will be used")}
    {% endif %}

    M106 P3 S0
    # do a separate bed soak if the bedtemp is not the same as the mesh_bedtemp
    {% if bedtemp != mesh_bedtemp %}
        #check if we are cooling the chamber during the print soak.
        {% if chambertemp >= 45 %}
            {% set cool_chamber_during_print_soak = 0 %}
        {% else %}
            {% set cool_chamber_during_print_soak = 1 %}
        {% endif %}
        M104 S140 
        RESPOND TYPE=command MSG="starting pre-print heatsoak"
        #heat soak at print temperature. don't shut down the steppers this time, we don't want to risk losing our homing after all that lovely meshing.
        HEAT_SOAK TARGET={ bedtemp } DURATION={ pre_print_soaktime } KEEP_CHAMBER_COOL={ cool_chamber_during_print_soak } SHUTDOWN_STEPPERS=0
    {% endif %}

    M140 S{bedtemp}
    {% if chambertemp == 0 %}
        M106 P3 S255
    {% endif %}
    
    _CG28
    
    G0 Z50 F600
    G0 X5 Y5  F6000
    RESPOND TYPE=command MSG="heating nozzle and getting ready to print... keep an eye on your z offset!"
    M190 S{bedtemp}
    M109 S{hotendtemp}
    M141 S{chambertemp}    
    M204 S10000
    # load skew profile right before printing
    {% if skew_profile %}
        SKEW_PROFILE LOAD="{ skew_profile }"
        { action_respond_info("skew profile " ~ skew_profile ~ " loaded.")}
    {% endif %}
    SET_PRINT_STATS_INFO CURRENT_LAYER=1
    ENABLE_ALL_SENSOR
    save_last_file


[gcode_macro PRINT_END]
gcode:
    # clear skew profile when print is done
    SET_SKEW CLEAR=1
    save_zoffset
    # {% if printer.gcode_move.homing_origin.z < 0.5 %}
    #    SAVE_VARIABLE VARIABLE=z_offset VALUE={printer.gcode_move.homing_origin.z}
    # {% endif %}
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
    CLEAR_PAUSE
    M400
    G4 P5000
    M106 P2 S0
    M106 P0 S0
    M106 P3 S0
    
    M104 S0
    M140 S0
    M141 S0

    M220 S100
    M221 S100
    SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_z enable=1
    SET_STEPPER_ENABLE STEPPER=stepper_z1 enable=1
	SET_STEPPER_ENABLE STEPPER=extruder enable=0
	
    DISABLE_ALL_SENSOR
    BED_MESH_CLEAR
    G31
    CLEAR_LAST_FILE
    M84
    BEEP I=2 DUR=500


[gcode_macro M4029]
description: updated M4209 that clears all saved z offsets
gcode:
    M104 S140
    M141 S0
    CLEAR_ALL_ZOFFSET
    # SAVE_VARIABLE VARIABLE=z_offset VALUE=0
    G28 
    M400
    M118 Position init complete
    
    CLEAR_NOZZLE HOTEND=280
    G28
    get_zoffset

# derived from blalor's heat soak macro from https://klipper.discourse.group/t/interruptible-heat-soak/1552
[gcode_macro HEAT_SOAK]
description: heats the bed for a while

gcode:
    
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set KEEP_CHAMBER_COOL = params.KEEP_CHAMBER_COOL | default(1) | int %}
    {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds
    {% set MOVE_TO_SAFE = (params.MOVE_TO_SAFE | default(1) | int) %}
    {% set SHUTDOWN_STEPPERS = (params.SHUTDOWN_STEPPERS | default(1) | int) %}

    { action_respond_info( "%.1fm soak @ %.1fc requested" % (DURATION / 60.0, TARGET))  }
    # fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    # put the bed and nozzle where they're a safe distance apart
    {% if MOVE_TO_SAFE %}
        { action_respond_info("moving bed and nozzle to optimum distance") }
        _CG28
        G0 Z50 F600
        G0 X5 Y5  F6000
        
    {% endif %}

    # run the chamber and aux cooling fans to keep the chamber cool
    {% if KEEP_CHAMBER_COOL %}
        { action_respond_info("Chamber will be cooled by chamber circulation fan and aux fan") }
        SET_FAN_SPEED FAN=chamber_circulation_fan SPEED=1
        SET_FAN_SPEED FAN=auxiliary_cooling_fan SPEED=1
    {% else %}
        { action_respond_info("Chamber cooling not requested") }
    {% endif %}

    {% if SHUTDOWN_STEPPERS %}
        M400
        M84
    {% endif %}
    
    M118 Bed heating to { TARGET }c
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={ TARGET } MAXIMUM={ TARGET +1 }
    M118 bed at temp, { DURATION / 60 }m soak started
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    {% for i in range(DURATION // 10) %}
        {% if i % 6 == 0 %} 
        M118 { (DURATION - i * 10) / 60 }m of soak time remaining...
        {% endif %}
        G4 P10000 #wait 10 seconds
    {% endfor %}
    M118 soak complete!
    TURN_OFF_HEATERS
    # always turn off the fans. They will be spun back up if needed
    SET_FAN_SPEED FAN=chamber_circulation_fan SPEED=0
    SET_FAN_SPEED FAN=auxiliary_cooling_fan SPEED=0
    
[gcode_macro CHECK_CHAMBER_TEMP]
gcode:
    {% set max = params.MAX | default(30) | float %}
    {% set min = params.MIN | default(15) | float %}
    {% set halt_on_fail = params.HALT_ON_FAIL | default (1) | int %}
    {% set current_temp = printer["heater_generic chamber"].temperature %}

    {% if current_temp > max or current_temp < min %}
        {% set message = ("chamber temp of %.1dc OUTSIDE specified range of %.1dc - %.1dc " % (current_temp, min, max)) %}
        {% if halt_on_fail %}
            { action_emergency_stop(message) }
        {% else %}
            { action_respond_info(message) }
        {% endif %}
    {% else %}
        {% set message = ("chamber temp of %.1dc within specified range of %.1dc - %.1dc " % (current_temp, min, max)) %}
        { action_respond_info(message) }
    {% endif %}


[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro save_zoffset]
description: save_zoffset macro updated to save multiple z offsets with names
variable_z_offset_name: ""
gcode:
    {% if printer['gcode_macro save_zoffset'].z_offset_name %}
        {% set z_offset_name = printer['gcode_macro save_zoffset'].z_offset_name | string %}
    {% else %}
        {% set zoffset_name = "z_offset" %}
    {% endif %}
    {% if printer.gcode_move.homing_origin.z < 0.5 %}
       SAVE_VARIABLE VARIABLE={ z_offset_name } VALUE={ printer.gcode_move.homing_origin.z }
       SAVE_VARIABLE VARIABLE=current_z_offset_name VALUE='"{ z_offset_name }"'
    {% endif %}

[gcode_macro set_zoffset]
description: set_zoffset macro updated to load multiple z offsets with names
gcode:
    # load the z offset set by print_start, if defined.
    {% if printer['gcode_macro save_zoffset'].z_offset_name %}
        {% set z_offset_name = printer['gcode_macro save_zoffset'].z_offset_name %}
    # if not, load the z offset defined by saved value current_z_offset_name or just use_z_offset if that's all there is.
    {% else %}
        {% set zoffset_name = printer.save_variables.variables['current_z_offset_name']| default("z_offset",true) %}

    {% endif %}
    { action_respond_info("attempting to load saved z_offset named: " ~ z_offset_name) }
    {% set z = printer.save_variables.variables[z_offset_name] | default(0) %}
    {% if z %}
        { action_respond_info("z_offset found. Setting z to: " ~ z  ) }
    {% else %}
        { action_respond_info("no saved z_offset found by that name. Setting z to: 0") }
    {% endif %}
   
    SET_GCODE_OFFSET Z={z} MOVE=0


[gcode_macro CLEAR_ALL_ZOFFSET]
description: clear all saved z_offsets if we call M4029. should also be used after any bed leveling activity.
gcode:
    #TODO iterate though all available 'z_offset' saved variables
    {% for key1 in printer.save_variables.variables %}
        {% if key1.startswith("z_offset") %}
            {% set original_value = printer.save_variables.variables[key1]%}
            SAVE_VARIABLE VARIABLE={ key1 } VALUE=0
            {% set message = "z offset " ~ key1 ~ " has been reset from: " ~ original_value ~ " to: 0! PROCEED WITH CAUTION"%}
            RESPOND TYPE=error MSG={message}
        {% endif %}
    {% endfor %}